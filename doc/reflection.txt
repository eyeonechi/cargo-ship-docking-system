Ivan Ken Weng Chee
736901
ichee@student.unimelb.edu.au
Assignment 1a Reflection


Assumptions
* Queue of ships pilot can only acquire first ship
* Space is finite, therefore a wait zone should have a limit for the number of ships
* Shield is activated when the program starts, for best protection against space debris
* Pilots have the ability to teleport and do not need to rest
* Tugs can pass through the shield through some unknown mechanism


        Initially, I constructed a naive solution using only while loops and boolean values, where a pilot would repeatedly call say, the function to acquire tugs repeatedly until successful. While output seemed consistent, CPU usage slowly crept upwards. A critical design decision was to redesign the system using mutual exclusion functions such as wait() and notifyAll(), producing a simulator which runs without stressing the system as much.


        Due to the nature of pilots releasing tugs after docking, a new pilot may well acquire the newly released tugs to guide a new ship towards the berth. Should the number of tugs % docking tugs be less than undocking tugs, the pilot will be unable to acquire enough tugs for the ship to undock. This in turn causes other ships in the vicinity of the berth to wait, with nothing happening, hence a deadlock scenario.
        One possible solution to this problem is for pilots to partially release but keep the required number of undocking tugs whilst the ship is unloading, to ensure it is able to proceed to the departure zone. Another solution may be for the Tugs class to separately allocate docking and undocking tugs so that both processes remain independent.


        Livelock does not occur in the system since pilot states do not clash with each other, inhibiting their progress. If pilots are programmed to voluntarily release tugs however, livelock may occur where new pilots keep acquiring the released tugs first instead of the pilot trying to undock.
        Given that more than 1 ship can wait in a wait zone, and that the order of ships acquired by pilots is by last-in-first-out (stack), if the producer produces ships at a faster rate than pilots maneuver them, then ships at the bottom of the stack will not get a chance to get acquired and move. They will be stuck indefinitely in the arrival zone, hence starvation occurs.


        Given the correct parameters, the system should be able to run indefinitely without experiencing deadlocks or memory leaks, implying a safety property. As the system has no notion of priority or mechanism of dealing with deadlocks (such as pilots volunteeringly releasing tugs after some time), the liveness of the system is relatively low.
        The execution of pilot threads are handled by the Java scheduler, which differs between runs and result in nondeterminism, causing difficulty in determining which pilot acquires which ship. Critical sections include the berth, wait zones and tugs. Here, multiple pilots access shared data such as ships and tugs. Monitors with synchronized methods are one way of coordinating accesses by enforcing only one pilot to access a resource at a time. Semaphores are another alternative.


        As for other insights, simulation is hard, and it is difficult or even impossible to model systems based on real life, especially systems of the future, without constraining the system with assumptions. Ambiguity in software specification can arise and needs to be handled well. Nondeterminism in concurrent processes leads to difficulty in debugging, especially in comparing output to determine correctness.